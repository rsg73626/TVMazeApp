# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: iOS Module Tests

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:

jobs:
  tests:
    runs-on: ios-18
    strategy:
      fail-fast: false
      matrix:
        scheme: [ "ShowsList", "ShowDetails" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Resolve Swift Packages
        run: |
          xcodebuild -resolvePackageDependencies -workspace TVMazeApp.xcworkspace

      - name: Run unit tests (${{ matrix.scheme }})
        run: |
          set -o pipefail
          xcodebuild \
            -workspace TVMazeApp.xcworkspace \
            -scheme "${{ matrix.scheme }}" \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
            -resultBundlePath TestResults/${{ matrix.scheme }}.xcresult \
            clean test
        env:
          NSUnbufferedIO: "YES"

      - name: Upload .xcresult
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults-${{ matrix.scheme }}
          path: TestResults/${{ matrix.scheme }}.xcresult

