# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

# .github/workflows/ios-module-tests.yml
name: iOS Module Tests

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:

concurrency:
  group: ios-module-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Test ${{ matrix.scheme }}
    runs-on: macos-15  # macOS com Xcode 16
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        scheme: [ "ShowsList", "ShowDetails" ]

    env:
      WORKSPACE: TVMazeApp.xcworkspace
      DERIVED_DATA: ${{ runner.temp }}/DerivedData
      DESTINATION: 'platform=iOS Simulator,name=iPhone 15,OS=latest'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Resolve SPM deps
        run: |
          xcodebuild -resolvePackageDependencies \
            -workspace "$WORKSPACE"

      - name: Show available schemes (debug)
        run: |
          xcodebuild -list -workspace "$WORKSPACE"

      - name: Build ${{ matrix.scheme }}
        run: |
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "${{ matrix.scheme }}" \
            -destination "$DESTINATION" \
            -derivedDataPath "$DERIVED_DATA" \
            -disableAutomaticPackageResolution \
            build | xcpretty
        shell: bash

      - name: Test ${{ matrix.scheme }}
        run: |
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "${{ matrix.scheme }}" \
            -destination "$DESTINATION" \
            -derivedDataPath "$DERIVED_DATA" \
            -enableCodeCoverage YES \
            -disableAutomaticPackageResolution \
            test | xcpretty && exit ${PIPESTATUS[0]}
        shell: bash

      - name: Save test logs (on failure)
        if: failure()
        run: |
          mkdir -p artifacts
          # Exporta os Ãºltimos logs da build/test
          LOG_DIR="$DERIVED_DATA/Logs/Test"
          cp -R "$LOG_DIR" artifacts/test-logs || true
        shell: bash

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.scheme }}
          path: artifacts
          if-no-files-found: ignore
