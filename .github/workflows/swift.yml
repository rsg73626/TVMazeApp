# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: iOS Module Tests

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:

jobs:
  tests:
    # Use runners de macOS (Apple Silicon) estáveis
    runs-on: macos-14
    timeout-minutes: 5

    strategy:
      fail-fast: false
      matrix:
        scheme: [ "ShowsList", "ShowDetails" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'

      # ⚠️ Não cacheie DerivedData. Só o cache do SwiftPM.
      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-

      - name: Resolve Swift Packages
        run: xcodebuild -resolvePackageDependencies -workspace TVMazeApp.xcworkspace

      # --- Higieniza simuladores e cria um limpo e previsível ---
      - name: Prepare Simulator
        run: |
          set -euxo pipefail
          # Fecha e apaga tudo para evitar zumbi
          xcrun simctl shutdown all || true
          xcrun simctl erase all || true

          # Escolha um runtime/DEVICE estáveis
          RUNTIME=$(xcrun simctl list runtimes | awk -F '[()]' '/iOS .*18/{print $2; exit}')
          DEVICE_NAME="CI-iPhone-16"
          xcrun simctl create "$DEVICE_NAME" "iPhone 16" "$RUNTIME"
          xcrun simctl boot "$DEVICE_NAME"
          xcrun simctl bootstatus "$DEVICE_NAME" -b  # espera boot completo

      - name: Run unit tests (${{ matrix.scheme }})
        env:
          NSUnbufferedIO: "YES"
        run: |
          set -euxo pipefail

          DESTINATION="platform=iOS Simulator,name=CI-iPhone-16,OS=18.0"

          # Derive Data isolado por scheme evita sujeira entre matrizes
          DERIVED_DATA="$PWD/DerivedData/${{ matrix.scheme }}"

          xcodebuild \
            -list \
            -workspace TVMazeApp.xcworkspace \
            -scheme "${{ matrix.scheme }}" \
            -destination "$DESTINATION" \
            -derivedDataPath "$DERIVED_DATA" \
            -parallel-testing-enabled NO \
            -resultBundlePath "TestResults/${{ matrix.scheme }}.xcresult" \
            clean test | xcpretty

      - name: Upload .xcresult
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults-${{ matrix.scheme }}
          path: TestResults/${{ matrix.scheme }}.xcresult
